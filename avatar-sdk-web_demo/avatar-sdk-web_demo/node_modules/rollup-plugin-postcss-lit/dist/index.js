"use strict";
const pluginutils_1 = require("@rollup/pluginutils");
const transformAst = require("transform-ast");
const CSS_TAG_ALIAS = 'cssTag';
const UNSAFE_CSS_TAG_ALIAS = 'unsafeCssTag';
const VITE_ASSET_URL_EXPRESSION = /__VITE_ASSET__([\w$]+)__(?:\$_(.*?)__)?/g;
const escape = (str) => wrapViteAssetExpressions(str.replace(/`/g, '\\`').replace(/\\(?!`)/g, '\\\\'));
const wrapViteAssetExpressions = (str) => str.replace(VITE_ASSET_URL_EXPRESSION, `$\{${UNSAFE_CSS_TAG_ALIAS}("__VITE_ASSET__$1__$2")}`);
module.exports = function postcssLit(options = {}) {
    const defaultOptions = {
        include: '**/*.{css,sss,pcss,styl,stylus,sass,scss,less}?(*)',
        exclude: '**/*?direct*',
        importPackage: 'lit',
    };
    const opts = Object.assign(Object.assign({}, defaultOptions), options);
    const filter = (0, pluginutils_1.createFilter)(opts.include, opts.exclude);
    return {
        name: 'postcss-lit',
        enforce: 'post',
        transform(code, id) {
            if (!filter(id))
                return;
            const ast = this.parse(code, {});
            let defaultExportName;
            let cssStringNode;
            const magicString = transformAst(code, { ast: ast });
            magicString.walk((node) => {
                if (node.type === 'ExportDefaultDeclaration') {
                    switch (node.declaration.type) {
                        case 'Literal': // export default '...';
                        case 'TemplateLiteral': // export default `...`;
                            cssStringNode = node.declaration;
                            break;
                        case 'Identifier': // const css = '...'; export default css;
                            defaultExportName = node.declaration.name;
                            break;
                        case 'CallExpression': {
                            // export default (() => '...')();
                            const arrowFunctionBody = node.declaration.callee.body;
                            if (arrowFunctionBody.type === 'Literal' ||
                                arrowFunctionBody.type === 'TemplateLiteral') {
                                cssStringNode = arrowFunctionBody;
                            }
                            break;
                        }
                        default:
                    }
                }
            });
            if (!cssStringNode) {
                if (!defaultExportName) {
                    this.warn(`Unrecognized default export in file ${id}`);
                    return;
                }
                magicString.walk((node) => {
                    if (node.type === 'VariableDeclaration') {
                        const exportedVar = node.declarations.find(d => {
                            var _a, _b, _c;
                            return ((_a = d.id) === null || _a === void 0 ? void 0 : _a.name) === defaultExportName &&
                                (((_b = d.init) === null || _b === void 0 ? void 0 : _b.type) === 'Literal' ||
                                    ((_c = d.init) === null || _c === void 0 ? void 0 : _c.type) === 'TemplateLiteral');
                        });
                        if (exportedVar) {
                            cssStringNode = exportedVar.init;
                        }
                    }
                });
            }
            if (!cssStringNode) {
                return this.error(`Unrecognized export expression in file ${id}`);
            }
            if (cssStringNode.type === 'Literal') {
                cssStringNode.edit.update(`${CSS_TAG_ALIAS}\`${escape(cssStringNode.value)}\``);
            }
            else {
                cssStringNode.edit.update(wrapViteAssetExpressions(cssStringNode.getSource()));
                cssStringNode.edit.prepend(CSS_TAG_ALIAS);
            }
            magicString.prepend(`import {css as ${CSS_TAG_ALIAS}, unsafeCSS as ${UNSAFE_CSS_TAG_ALIAS}} from '${opts.importPackage}';\n`);
            return {
                code: magicString.toString(),
                map: magicString.generateMap({
                    hires: true,
                }),
            };
        },
    };
};
//# sourceMappingURL=index.js.map